"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read SECRET_KEY from environment in production. In development, when the
# environment variable is not set, create a secure random key at startup.
# This avoids committing a weak hard-coded secret to source control.
try:
    # Import here to avoid adding django to requirements if settings are
    # inspected outside a Django runtime in some contexts.
    from django.core.management.utils import get_random_secret_key
except Exception:
    get_random_secret_key = None

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY') or (
    get_random_secret_key() if get_random_secret_key is not None else 'change-me'
)

# DEBUG should be False in production. Control it via environment variable.
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# -------------------------
# Security settings (production)
# -------------------------
# The following settings enable common HTTP security headers and make
# session/CSRF cookies only be sent over HTTPS. Review before changing
# for development (you may need to disable some during local testing).

# Cookies: only send cookies over HTTPS and make session cookies inaccessible to JS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
# Setting CSRF_COOKIE_HTTPONLY to True prevents JavaScript from reading the
# CSRF cookie. This improves security but may break some AJAX/JS clients that
# expect to read the cookie. Keep True in production unless you intentionally
# need client-side access to the CSRF token.
CSRF_COOKIE_HTTPONLY = True

# Browser-level headers
# Set to True to send 'X-XSS-Protection: 1; mode=block' (older browsers)
SECURE_BROWSER_XSS_FILTER = True
# Prevent the browser from guessing the content type
SECURE_CONTENT_TYPE_NOSNIFF = True
# Prevent this site from being framed to avoid clickjacking
X_FRAME_OPTIONS = 'DENY'

# -------------------------
# HTTPS / HSTS / SSL redirect settings
# -------------------------
# Redirect all HTTP requests to HTTPS. Set to True in production.
SECURE_SSL_REDIRECT = True
# HTTP Strict Transport Security (HSTS) - tell browsers to use HTTPS only.
# Start with a low value for testing (e.g., 60) and then increase to 31536000
# (1 year) once you are confident HTTPS is correctly configured.
SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '31536000'))
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'True') == 'True'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'True') == 'True'

# If your Django app is behind a proxy/load-balancer that handles SSL,
# set SECURE_PROXY_SSL_HEADER so Django knows the original request scheme.
# Common header from many proxies is 'HTTP_X_FORWARDED_PROTO' = 'https'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf.apps.BookshelfConfig',
    'rest_framework',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'bookshelf.middleware.SecurityHeadersMiddleware'
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR , 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL='bookshelf.CustomUser'


